#include <iostream>
#include <vector>
using namespace std;



class Node{
	public: 
		int value;
		Node *parent
		vector <int> children_id;
		bool is_visited;
		int sub_tree_sum;
		int calculate_sub_tree_sum(Node *);
};

int Node::calculate_sub_tree_sum(Node *root){
	if(root==NULL)
		return 0;
	for(int i=0;i<root.children.size();i++){}
}


int main(){
	int number_of_nodes;
	cin>>number_of_nodes;
	Node *nodes_in_tree;
	nodes_in_tree= new Node[number_of_nodes];
	int value;
	for(int i=0;i<number_of_nodes;i++){
		cin>>value;
		nodes_in_tree[i].value=value;
		nodes_in_tree[i].is_visited=false;
		nodes_in_tree[i].sub_tree_sum=0;
	}
	int number_of_edges;
	cin>>number_of_edges;
	int node1;
	int node2;
	for(int i=0;i<number_of_edges;i++){
		cin>>node1;
		cin>>node2;
		nodes_in_tree[node1-1].children.push_back(node2-1);
		nodes_in_tree[node2-1].parent=nodes_in_tree[node1-1];
	}
	


}